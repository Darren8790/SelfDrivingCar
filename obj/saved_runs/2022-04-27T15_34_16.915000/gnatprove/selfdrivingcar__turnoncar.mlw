module Selfdrivingcar__onoff
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type onoff
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = onoff,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type onoff__ref = { mutable onoff__content : onoff }
  
  function onoff__ref_onoff__content__projection (a: onoff__ref) : onoff =
    a.onoff__content
  
  meta "model_projection" function onoff__ref_onoff__content__projection
  
  meta "inline:no" function onoff__ref_onoff__content__projection
  
  val onoff__havoc (x: onoff__ref) : unit
    writes { x }
end

module Selfdrivingcar__onoff__rep
  use Selfdrivingcar__onoff as Selfdrivingcar__onoff
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Selfdrivingcar__onoff.onoff,
    predicate in_range = Selfdrivingcar__onoff.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Selfdrivingcar__gearbox
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type gearbox
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (3 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = gearbox,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type gearbox__ref = { mutable gearbox__content : gearbox }
  
  function gearbox__ref_gearbox__content__projection (a: gearbox__ref) : gearbox =
    a.gearbox__content
  
  meta "model_projection" function gearbox__ref_gearbox__content__projection
  
  meta "inline:no" function gearbox__ref_gearbox__content__projection
  
  val gearbox__havoc (x: gearbox__ref) : unit
    writes { x }
end

module Selfdrivingcar__gearbox__rep
  use Selfdrivingcar__gearbox as Selfdrivingcar__gearbox
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Selfdrivingcar__gearbox.gearbox,
    predicate in_range = Selfdrivingcar__gearbox.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Selfdrivingcar__car__rep
  use _gnatprove_standard.Main
  use int.Int
  use Selfdrivingcar__onoff as Selfdrivingcar__onoff
  use Selfdrivingcar__onoff__rep as Selfdrivingcar__onoff__rep
  use Selfdrivingcar__gearbox as Selfdrivingcar__gearbox
  use Selfdrivingcar__gearbox__rep as Selfdrivingcar__gearbox__rep
  
  type __split_fields = {
                       rec__selfdrivingcar__car__gear :
                         Selfdrivingcar__gearbox.gearbox;
                       rec__selfdrivingcar__car__switch :
                         Selfdrivingcar__onoff.onoff
                       }
  
  function __split_fields_rec__selfdrivingcar__car__gear__projection (a: __split_fields) : 
    Selfdrivingcar__gearbox.gearbox =
    a.rec__selfdrivingcar__car__gear
  
  meta "model_projection" function __split_fields_rec__selfdrivingcar__car__gear__projection
  
  meta "inline:no" function __split_fields_rec__selfdrivingcar__car__gear__projection
  
  function __split_fields_rec__selfdrivingcar__car__switch__projection (a: __split_fields) : 
    Selfdrivingcar__onoff.onoff =
    a.rec__selfdrivingcar__car__switch
  
  meta "model_projection" function __split_fields_rec__selfdrivingcar__car__switch__projection
  
  meta "inline:no" function __split_fields_rec__selfdrivingcar__car__switch__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields }
  
  function __rep___split_fields__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__projection
  
  meta "inline:no" function __rep___split_fields__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate selfdrivingcar__car__gear__pred (a: __rep) = true
  
  val selfdrivingcar__car__gear__pred (a: __rep) : bool
    ensures { result <-> (selfdrivingcar__car__gear__pred (a : __rep)) }
  
  val rec__selfdrivingcar__car__gear_ (a: __rep) : Selfdrivingcar__gearbox.gearbox
    requires { selfdrivingcar__car__gear__pred a }
    ensures { (result = ((__split_fields a).rec__selfdrivingcar__car__gear)) }
  
  predicate selfdrivingcar__car__switch__pred (a: __rep) = true
  
  val selfdrivingcar__car__switch__pred (a: __rep) : bool
    ensures { result <-> (selfdrivingcar__car__switch__pred (a : __rep)) }
  
  val rec__selfdrivingcar__car__switch_ (a: __rep) : Selfdrivingcar__onoff.onoff
    requires { selfdrivingcar__car__switch__pred a }
    ensures { (result
                 = ((__split_fields a).rec__selfdrivingcar__car__switch)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if (((Selfdrivingcar__gearbox__rep.to_rep
            ((__split_fields a).rec__selfdrivingcar__car__gear))
           = (Selfdrivingcar__gearbox__rep.to_rep
                ((__split_fields b).rec__selfdrivingcar__car__gear))) /\
          ((Selfdrivingcar__onoff__rep.to_rep
              ((__split_fields a).rec__selfdrivingcar__car__switch))
             = (Selfdrivingcar__onoff__rep.to_rep
                  ((__split_fields b).rec__selfdrivingcar__car__switch)))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
end

module Selfdrivingcar__car
  use export Selfdrivingcar__car__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type car = __rep
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function selfdrivingcar__car__gear__first__bit : int
  
  val function selfdrivingcar__car__gear__last__bit : int
  
  val function selfdrivingcar__car__gear__position : int
  
  axiom selfdrivingcar__car__gear__first__bit_axiom:
    (selfdrivingcar__car__gear__first__bit >= (0 : int))
  
  axiom selfdrivingcar__car__gear__last__bit_axiom:
    (selfdrivingcar__car__gear__last__bit
       > selfdrivingcar__car__gear__first__bit)
  
  axiom selfdrivingcar__car__gear__position_axiom:
    (selfdrivingcar__car__gear__position >= (0 : int))
  
  val function selfdrivingcar__car__switch__first__bit : int
  
  val function selfdrivingcar__car__switch__last__bit : int
  
  val function selfdrivingcar__car__switch__position : int
  
  axiom selfdrivingcar__car__switch__first__bit_axiom:
    (selfdrivingcar__car__switch__first__bit >= (0 : int))
  
  axiom selfdrivingcar__car__switch__last__bit_axiom:
    (selfdrivingcar__car__switch__last__bit
       > selfdrivingcar__car__switch__first__bit)
  
  axiom selfdrivingcar__car__switch__position_axiom:
    (selfdrivingcar__car__switch__position >= (0 : int))
  
  val function user_eq (a: car) (b: car) : bool
  
  val function dummy : car
  
  type car__ref = { mutable car__content : car }
  
  function car__ref_car__content__projection (a: car__ref) : car =
    a.car__content
  
  meta "model_projection" function car__ref_car__content__projection
  
  meta "inline:no" function car__ref_car__content__projection
  
  val car__havoc (x: car__ref) : unit
    writes { x }
end

module Selfdrivingcar__s1
  use _gnatprove_standard.Main
  use int.Int
  use Selfdrivingcar__car as Selfdrivingcar__car
  
  val s1__split_fields : Selfdrivingcar__car.__split_fields__ref
end

module Selfdrivingcar__car___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Selfdrivingcar__car as Selfdrivingcar__car
  
  predicate dynamic_invariant (temp___expr_179: Selfdrivingcar__car.car) (temp___is_init_175: bool) (temp___skip_constant_176: bool) (temp___do_toplevel_177: bool) (temp___do_typ_inv_178: bool) =
    true
  
  val dynamic_invariant (temp___expr_179: Selfdrivingcar__car.car) (temp___is_init_175: bool) (temp___skip_constant_176: bool) (temp___do_toplevel_177: bool) (temp___do_typ_inv_178: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_179 : Selfdrivingcar__car.car))
                      (temp___is_init_175 : bool))
                     (temp___skip_constant_176 : bool))
                    (temp___do_toplevel_177 : bool))
                   (temp___do_typ_inv_178 : bool)) }
  
  predicate default_initial_assumption (temp___expr_180: Selfdrivingcar__car.car) (temp___skip_top_level_181: bool) =
    true
  
  val default_initial_assumption (temp___expr_180: Selfdrivingcar__car.car) (temp___skip_top_level_181: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_180 : Selfdrivingcar__car.car))
                   (temp___skip_top_level_181 : bool)) }
end

module Selfdrivingcar__onoff___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Selfdrivingcar__onoff as Selfdrivingcar__onoff
  
  predicate dynamic_invariant (temp___expr_165: int) (temp___is_init_161: bool) (temp___skip_constant_162: bool) (temp___do_toplevel_163: bool) (temp___do_typ_inv_164: bool) =
    if ((temp___is_init_161 = True) \/
          (Selfdrivingcar__onoff.first <= Selfdrivingcar__onoff.last)) then
      (((Selfdrivingcar__onoff.dynamic_property Selfdrivingcar__onoff.first)
          Selfdrivingcar__onoff.last)
         temp___expr_165)
    else true
  
  val dynamic_invariant (temp___expr_165: int) (temp___is_init_161: bool) (temp___skip_constant_162: bool) (temp___do_toplevel_163: bool) (temp___do_typ_inv_164: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_165 : int))
                      (temp___is_init_161 : bool))
                     (temp___skip_constant_162 : bool))
                    (temp___do_toplevel_163 : bool))
                   (temp___do_typ_inv_164 : bool)) }
  
  predicate default_initial_assumption (temp___expr_166: int) (temp___skip_top_level_167: bool) =
    true
  
  val default_initial_assumption (temp___expr_166: int) (temp___skip_top_level_167: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_166 : int))
                   (temp___skip_top_level_167 : bool)) }
end

module Selfdrivingcar__gearbox___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Selfdrivingcar__gearbox as Selfdrivingcar__gearbox
  
  predicate dynamic_invariant (temp___expr_172: int) (temp___is_init_168: bool) (temp___skip_constant_169: bool) (temp___do_toplevel_170: bool) (temp___do_typ_inv_171: bool) =
    if ((temp___is_init_168 = True) \/
          (Selfdrivingcar__gearbox.first <= Selfdrivingcar__gearbox.last)) then
      (((Selfdrivingcar__gearbox.dynamic_property
           Selfdrivingcar__gearbox.first)
          Selfdrivingcar__gearbox.last)
         temp___expr_172)
    else true
  
  val dynamic_invariant (temp___expr_172: int) (temp___is_init_168: bool) (temp___skip_constant_169: bool) (temp___do_toplevel_170: bool) (temp___do_typ_inv_171: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_172 : int))
                      (temp___is_init_168 : bool))
                     (temp___skip_constant_169 : bool))
                    (temp___do_toplevel_170 : bool))
                   (temp___do_typ_inv_171 : bool)) }
  
  predicate default_initial_assumption (temp___expr_173: int) (temp___skip_top_level_174: bool) =
    true
  
  val default_initial_assumption (temp___expr_173: int) (temp___skip_top_level_174: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_173 : int))
                   (temp___skip_top_level_174 : bool)) }
end

module Selfdrivingcar__s1___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Selfdrivingcar__turnoncar__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Selfdrivingcar__s1 as Selfdrivingcar__s1
  use Selfdrivingcar__car as Selfdrivingcar__car
  use Selfdrivingcar__car___axiom as Selfdrivingcar__car___axiom
  use Selfdrivingcar__onoff as Selfdrivingcar__onoff
  use Selfdrivingcar__onoff__rep as Selfdrivingcar__onoff__rep
  use Selfdrivingcar__gearbox as Selfdrivingcar__gearbox
  use Selfdrivingcar__gearbox__rep as Selfdrivingcar__gearbox__rep
  use Selfdrivingcar__onoff___axiom as Selfdrivingcar__onoff___axiom
  use Selfdrivingcar__gearbox___axiom as Selfdrivingcar__gearbox___axiom
  use Selfdrivingcar__car___axiom as Selfdrivingcar__car___axiom
  use Selfdrivingcar__s1___axiom as Selfdrivingcar__s1___axiom
  
  let def (__void_param : unit)
    requires { [#"selfdrivingcar.ads" 25 0 0] true }
    ensures { [#"selfdrivingcar.ads" 25 0 0]
              [#"selfdrivingcar.ads" 28 0 0]
              [@comment:     Post => S1.switch = On;              ^ selfdrivingcar.ads:28:14:VC_POSTCONDITION]
              [@GP_Reason:VC_POSTCONDITION]
              [@GP_Shape:pragargs__cmp]
              [@GP_Sloc:selfdrivingcar.ads:28:14]
              [@model_vc_post]
              [@GP_Id:0]
              [@GP_Pretty_Ada:983]
              [@GP_Sloc:selfdrivingcar.ads:28:14]
              ((Selfdrivingcar__onoff__rep.to_rep
                  ((Selfdrivingcar__car.__split_fields
                       { Selfdrivingcar__car.__split_fields =
                           (Selfdrivingcar__car.__split_fields__content
                               Selfdrivingcar__s1.s1__split_fields) }).
                     Selfdrivingcar__car.rec__selfdrivingcar__car__switch))
                 = (0 : int)) }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram selfdrivingcar.ads:25]
      ());
     assume {
       ((((Selfdrivingcar__car___axiom.dynamic_invariant
             { Selfdrivingcar__car.__split_fields =
                 (Selfdrivingcar__car.__split_fields__content
                     Selfdrivingcar__s1.s1__split_fields) })
            True)
           False)
          True)
         True };
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram selfdrivingcar.ads:25]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram selfdrivingcar.ads:25]
      ());
     (begin
        ensures { true }
        let _ =
          let _ =
            ((Selfdrivingcar__gearbox__rep.to_rep
                ((Selfdrivingcar__car.__split_fields
                     { Selfdrivingcar__car.__split_fields =
                         (Selfdrivingcar__car.__split_fields__content
                             Selfdrivingcar__s1.s1__split_fields) }).
                   Selfdrivingcar__car.rec__selfdrivingcar__car__gear))
               = (0 : int)) in
          () in
        ()
      end);
     ([@GNAT-comment:Assume Pre of the subprogram selfdrivingcar.ads:25] ());
     assume {
       [@GP_Pretty_Ada:971]
       ((Selfdrivingcar__gearbox__rep.to_rep
           ((Selfdrivingcar__car.__split_fields
                { Selfdrivingcar__car.__split_fields =
                    (Selfdrivingcar__car.__split_fields__content
                        Selfdrivingcar__s1.s1__split_fields) }).Selfdrivingcar__car.rec__selfdrivingcar__car__gear))
          = (0 : int)) };
     (try
        ([@GP_Sloc:selfdrivingcar.adb:6:7] [#"selfdrivingcar.adb" 6 0 0] ());
        ([@GP_Sloc:selfdrivingcar.adb:6:17]
         [#"selfdrivingcar.adb" 6 0 0]
         (let temp___208 =
            let temp___207 =
              { Selfdrivingcar__car.__split_fields =
                  (Selfdrivingcar__car.__split_fields__content
                      Selfdrivingcar__s1.s1__split_fields) } in
            ([#"selfdrivingcar.adb" 6 0 0]
             (begin
                ensures { true }
                let _ =
                  let _ =
                    (Selfdrivingcar__car.__split_fields temp___207).Selfdrivingcar__car.rec__selfdrivingcar__car__switch in
                  () in
                ()
              end));
            ({ temp___207 with
               Selfdrivingcar__car.__split_fields =
                 ({ (Selfdrivingcar__car.__split_fields temp___207) with
                    Selfdrivingcar__car.rec__selfdrivingcar__car__switch =
                      (Selfdrivingcar__onoff__rep.of_rep (0 : int)) }) }) in
          [#"selfdrivingcar.adb" 6 0 0]
          (Selfdrivingcar__s1.s1__split_fields.Selfdrivingcar__car.__split_fields__content <-
             (Selfdrivingcar__car.__split_fields temp___208))));
        (raise Return__exc)
      with Return__exc -> ()
      end);
     (begin
        ensures { true }
        let _ =
          let _ =
            ((Selfdrivingcar__onoff__rep.to_rep
                ((Selfdrivingcar__car.__split_fields
                     { Selfdrivingcar__car.__split_fields =
                         (Selfdrivingcar__car.__split_fields__content
                             Selfdrivingcar__s1.s1__split_fields) }).
                   Selfdrivingcar__car.rec__selfdrivingcar__car__switch))
               = (0 : int)) in
          () in
        ()
      end))
end
