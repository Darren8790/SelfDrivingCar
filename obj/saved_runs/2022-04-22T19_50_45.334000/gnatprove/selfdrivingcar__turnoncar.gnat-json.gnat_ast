(* Module for axiomatizing type "onoff" defined at selfdrivingcar.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__onoff
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type onoff  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = onoff,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type onoff__ref  = { mutable onoff__content : onoff }
  
  function   onoff__ref_onoff__content__projection (a : onoff__ref) requires
    {  } ensures  {  } returns onoff = a.onoff__content
  
  meta model_projection function onoff__ref_onoff__content__projection
  
  meta inline:no function onoff__ref_onoff__content__projection
  
  function   onoff__havoc (x : onoff__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "onoff" defined at selfdrivingcar.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__onoff__rep
  
  use        Selfdrivingcar__onoff
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Selfdrivingcar__onoff.onoff,
    predicate in_range = Selfdrivingcar__onoff.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "gearbox" defined at selfdrivingcar.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__gearbox
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type gearbox  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 3
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = gearbox,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type gearbox__ref  = { mutable gearbox__content : gearbox }
  
  function   gearbox__ref_gearbox__content__projection (a : gearbox__ref)
    requires {  } ensures  {  } returns gearbox = a.gearbox__content
  
  meta model_projection function gearbox__ref_gearbox__content__projection
  
  meta inline:no function gearbox__ref_gearbox__content__projection
  
  function   gearbox__havoc (x : gearbox__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "gearbox" defined at selfdrivingcar.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__gearbox__rep
  
  use        Selfdrivingcar__gearbox
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Selfdrivingcar__gearbox.gearbox,
    predicate in_range = Selfdrivingcar__gearbox.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the record theory associated to type "car" defined at selfdrivingcar.ads:6, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Selfdrivingcar__car__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Selfdrivingcar__onoff
  use        Selfdrivingcar__onoff__rep
  use        Selfdrivingcar__gearbox
  use        Selfdrivingcar__gearbox__rep
  
  type __split_fields  = { [name:gear]
                           [model_trace:.863]rec__selfdrivingcar__car__gear : Selfdrivingcar__gearbox.gearbox;
                           [model_trace:.868]
                           [name:switch]rec__selfdrivingcar__car__switch : Selfdrivingcar__onoff.onoff }
  
  function [name:gear] [model_trace:.863] 
    __split_fields_rec__selfdrivingcar__car__gear__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Selfdrivingcar__gearbox.gearbox = a.rec__selfdrivingcar__car__gear
  
  meta model_projection function __split_fields_rec__selfdrivingcar__car__gear__projection
  
  meta inline:no function __split_fields_rec__selfdrivingcar__car__gear__projection
  
  function [model_trace:.868] [name:switch] 
    __split_fields_rec__selfdrivingcar__car__switch__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Selfdrivingcar__onoff.onoff = a.rec__selfdrivingcar__car__switch
  
  meta model_projection function __split_fields_rec__selfdrivingcar__car__switch__projection
  
  meta inline:no function __split_fields_rec__selfdrivingcar__car__switch__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__projection
  
  meta inline:no function __rep___split_fields__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   selfdrivingcar__car__gear__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__selfdrivingcar__car__gear_ (a : __rep) requires
    { (selfdrivingcar__car__gear__pred a) } ensures 
    { (result = a.__split_fields.rec__selfdrivingcar__car__gear) } returns
    Selfdrivingcar__gearbox.gearbox
  
  function   selfdrivingcar__car__switch__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__selfdrivingcar__car__switch_ (a : __rep) requires
    { (selfdrivingcar__car__switch__pred a) } ensures 
    { (result = a.__split_fields.rec__selfdrivingcar__car__switch) } returns
    Selfdrivingcar__onoff.onoff
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((Selfdrivingcar__gearbox__rep.to_rep
                a.__split_fields.rec__selfdrivingcar__car__gear)
               = (Selfdrivingcar__gearbox__rep.to_rep
                    b.__split_fields.rec__selfdrivingcar__car__gear)) /\
              ((Selfdrivingcar__onoff__rep.to_rep
                  a.__split_fields.rec__selfdrivingcar__car__switch)
                 = (Selfdrivingcar__onoff__rep.to_rep
                      b.__split_fields.rec__selfdrivingcar__car__switch)))
           then True  else False)

end

(* Module for axiomatizing type "car" defined at selfdrivingcar.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__car
  
  use export Selfdrivingcar__car__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type car  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   selfdrivingcar__car__gear__first__bit () requires {  } ensures 
    {  } returns int
  
  function   selfdrivingcar__car__gear__last__bit () requires {  } ensures 
    {  } returns int
  
  function   selfdrivingcar__car__gear__position () requires {  } ensures 
    {  } returns int
  
  axiom selfdrivingcar__car__gear__first__bit_axiom : ((selfdrivingcar__car__gear__first__bit
                                                          ) >= 0)
  
  axiom selfdrivingcar__car__gear__last__bit_axiom : ((selfdrivingcar__car__gear__last__bit
                                                         )
                                                        > (selfdrivingcar__car__gear__first__bit
                                                             ))
  
  axiom selfdrivingcar__car__gear__position_axiom : ((selfdrivingcar__car__gear__position
                                                        ) >= 0)
  
  function   selfdrivingcar__car__switch__first__bit () requires {  }
    ensures  {  } returns int
  
  function   selfdrivingcar__car__switch__last__bit () requires {  } ensures 
    {  } returns int
  
  function   selfdrivingcar__car__switch__position () requires {  } ensures 
    {  } returns int
  
  axiom selfdrivingcar__car__switch__first__bit_axiom : ((selfdrivingcar__car__switch__first__bit
                                                            ) >= 0)
  
  axiom selfdrivingcar__car__switch__last__bit_axiom : ((selfdrivingcar__car__switch__last__bit
                                                           )
                                                          > (selfdrivingcar__car__switch__first__bit
                                                               ))
  
  axiom selfdrivingcar__car__switch__position_axiom : ((selfdrivingcar__car__switch__position
                                                          ) >= 0)
  
  function   user_eq (a : car b : car) requires { True } ensures  { True }
    returns bool
  
  function   dummy () requires {  } ensures  {  } returns car
  
  type car__ref  = { mutable car__content : car }
  
  function   car__ref_car__content__projection (a : car__ref) requires {  }
    ensures  {  } returns car = a.car__content
  
  meta model_projection function car__ref_car__content__projection
  
  meta inline:no function car__ref_car__content__projection
  
  function   car__havoc (x : car__ref) requires {  } ensures  {  } returns
    unit

end

(* Module for defining a ref holding the value of variable "s1" defined at selfdrivingcar.ads:11, created in Gnat2Why.Decls.Translate_Variable *)
module Selfdrivingcar__s1
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Selfdrivingcar__car
  
  val s1__split_fields [model_projected] [model_trace:874]
  [name:S1] [sloc:selfdrivingcar.ads:11]: Selfdrivingcar__car.__split_fields

end

(* Module giving axioms for type "car" defined at selfdrivingcar.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selfdrivingcar__car___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Selfdrivingcar__car
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_179) : Selfdrivingcar__car.car
    ([mlw:proxy_symbol] [introduced] temp___is_init_175) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_176) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_177) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_178) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_180) : Selfdrivingcar__car.car
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_181) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "onoff" defined at selfdrivingcar.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selfdrivingcar__onoff___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Selfdrivingcar__onoff
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_165) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_161) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_162) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_163) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_164) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_161) = True) \/
          (Selfdrivingcar__onoff.first <= Selfdrivingcar__onoff.last))
       then
       (Selfdrivingcar__onoff.dynamic_property Selfdrivingcar__onoff.first
          Selfdrivingcar__onoff.last ([mlw:proxy_symbol]
          [introduced] temp___expr_165))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_166) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_167) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "gearbox" defined at selfdrivingcar.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selfdrivingcar__gearbox___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Selfdrivingcar__gearbox
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_172) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_168) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_169) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_170) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_171) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_168) = True) \/
          (Selfdrivingcar__gearbox.first <= Selfdrivingcar__gearbox.last))
       then
       (Selfdrivingcar__gearbox.dynamic_property
          Selfdrivingcar__gearbox.first Selfdrivingcar__gearbox.last
          ([mlw:proxy_symbol] [introduced] temp___expr_172))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_173) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_174) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "s1" defined at selfdrivingcar.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Selfdrivingcar__s1___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "turnoncar" defined at selfdrivingcar.ads:25, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Selfdrivingcar__turnoncar__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Selfdrivingcar__s1
  use        Selfdrivingcar__car
  use        Selfdrivingcar__car___axiom
  use        Selfdrivingcar__onoff
  use        Selfdrivingcar__onoff__rep
  use        Selfdrivingcar__gearbox
  use        Selfdrivingcar__gearbox__rep
  use        Selfdrivingcar__onoff___axiom
  use        Selfdrivingcar__gearbox___axiom
  use        Selfdrivingcar__car___axiom
  use        Selfdrivingcar__s1___axiom
  
  function [GP_Subp:selfdrivingcar.ads:25] [sloc:selfdrivingcar.ads:25] def
    (__void_param : unit) requires { True } ensures 
    { ([sloc:selfdrivingcar.ads:28] ([comment:     Post => S1.switch = On;              ^ selfdrivingcar.ads:28:14:VC_POSTCONDITION]
                                    [GP_Reason:VC_POSTCONDITION]
                                    [GP_Shape:pragargs__cmp]
                                    [GP_Sloc:selfdrivingcar.ads:28:14]
                                    [model_vc_post]
                                    [GP_Id:0] ([GP_Pretty_Ada:983]
                                              [GP_Sloc:selfdrivingcar.ads:28:14] (
                                              (Selfdrivingcar__onoff__rep.to_rep
                                                 ( --pp_record_aggregate NOT IMPLEMENTED).Selfdrivingcar__car.__split_fields.Selfdrivingcar__car.rec__selfdrivingcar__car__switch)
                                                = 0)))) } returns
     = (* Assume dynamic invariants of inputs of the subprogram selfdrivingcar.ads:25 *);
        assume
        { (Selfdrivingcar__car___axiom.dynamic_invariant
             --pp_record_aggregate NOT IMPLEMENTED True False True True) };
        (* Assume moved pointers in outputs of the subprogram selfdrivingcar.ads:25 *);
        (* Check for RTE in the Pre of the subprogram selfdrivingcar.ads:25 *);
        abstract ensures
        { True } begin  (let _ =
                       ((Selfdrivingcar__onoff__rep.to_rep
                           ( --pp_record_aggregate NOT IMPLEMENTED).Selfdrivingcar__car.__split_fields.Selfdrivingcar__car.rec__selfdrivingcar__car__switch)
                          = 1)
                       in ())  end;
        (* Assume Pre of the subprogram selfdrivingcar.ads:25 *);
        assume
        { ([GP_Pretty_Ada:971] ((Selfdrivingcar__onoff__rep.to_rep
                                   ( --pp_record_aggregate NOT IMPLEMENTED).Selfdrivingcar__car.__split_fields.Selfdrivingcar__car.rec__selfdrivingcar__car__switch)
                                  = 1)) };
        (try
        ();
          ([GP_Sloc:selfdrivingcar.adb:6:7] ([sloc:selfdrivingcar.adb:6] ()));
          ([GP_Sloc:selfdrivingcar.adb:6:15] ([sloc:selfdrivingcar.adb:6] (let ([mlw:proxy_symbol]
                                             [introduced] temp___208) =
                                             (let ([mlw:proxy_symbol]
                                               [introduced] temp___207) =
                                               ( --pp_record_aggregate NOT IMPLEMENTED)
                                               in abstract ensures
                                               { True } begin  (let _ =
                                                              ([mlw:proxy_symbol]
                                                                [introduced] temp___207).Selfdrivingcar__car.__split_fields.Selfdrivingcar__car.rec__selfdrivingcar__car__gear
                                                              in ())  end;
                                               --pp_record_update NOT IMPLEMENTED)
                                             in (
                                             Selfdrivingcar__s1.s1__split_fields
                                             :=
                                             ([mlw:proxy_symbol]
                                               [introduced] temp___208).Selfdrivingcar__car.__split_fields))));
          raise Return__exc with | Return__exc  -> ());
        abstract ensures
        { True } begin  (let _ =
                       ((Selfdrivingcar__onoff__rep.to_rep
                           ( --pp_record_aggregate NOT IMPLEMENTED).Selfdrivingcar__car.__split_fields.Selfdrivingcar__car.rec__selfdrivingcar__car__switch)
                          = 0)
                       in ())  end

end
