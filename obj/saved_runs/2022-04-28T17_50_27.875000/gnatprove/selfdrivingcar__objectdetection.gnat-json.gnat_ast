(* Module for axiomatizing type "onoff" defined at selfdrivingcar.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__onoff
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type onoff  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = onoff,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type onoff__ref  = { mutable onoff__content : onoff }
  
  function   onoff__ref_onoff__content__projection (a : onoff__ref) requires
    {  } ensures  {  } returns onoff = a.onoff__content
  
  meta model_projection function onoff__ref_onoff__content__projection
  
  meta inline:no function onoff__ref_onoff__content__projection
  
  function   onoff__havoc (x : onoff__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "onoff" defined at selfdrivingcar.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__onoff__rep
  
  use        Selfdrivingcar__onoff
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Selfdrivingcar__onoff.onoff,
    predicate in_range = Selfdrivingcar__onoff.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "gearbox" defined at selfdrivingcar.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__gearbox
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type gearbox  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 2
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = gearbox,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type gearbox__ref  = { mutable gearbox__content : gearbox }
  
  function   gearbox__ref_gearbox__content__projection (a : gearbox__ref)
    requires {  } ensures  {  } returns gearbox = a.gearbox__content
  
  meta model_projection function gearbox__ref_gearbox__content__projection
  
  meta inline:no function gearbox__ref_gearbox__content__projection
  
  function   gearbox__havoc (x : gearbox__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "gearbox" defined at selfdrivingcar.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__gearbox__rep
  
  use        Selfdrivingcar__gearbox
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Selfdrivingcar__gearbox.gearbox,
    predicate in_range = Selfdrivingcar__gearbox.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "chargelevel" defined at selfdrivingcar.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__chargelevel
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type chargelevel  = <range 0 100>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 100
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = chargelevel,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type chargelevel__ref  = { mutable chargelevel__content : chargelevel }
  
  function   chargelevel__ref_chargelevel__content__projection
    (a : chargelevel__ref) requires {  } ensures  {  } returns
    chargelevel = a.chargelevel__content
  
  meta model_projection function chargelevel__ref_chargelevel__content__projection
  
  meta inline:no function chargelevel__ref_chargelevel__content__projection
  
  function   chargelevel__havoc (x : chargelevel__ref) requires {  } ensures 
    {  } returns unit

end

(* Module defining to_rep/of_rep for type "chargelevel" defined at selfdrivingcar.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__chargelevel__rep
  
  use        Selfdrivingcar__chargelevel
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Selfdrivingcar__chargelevel.chargelevel) requires
    { True } ensures  { True } returns
    int = (Selfdrivingcar__chargelevel.chargelevel'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Selfdrivingcar__chargelevel.chargelevel,
    predicate in_range = Selfdrivingcar__chargelevel.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "carspeed" defined at selfdrivingcar.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__carspeed
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type carspeed  = <range 0 100>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 100
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = carspeed,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type carspeed__ref  = { mutable carspeed__content : carspeed }
  
  function   carspeed__ref_carspeed__content__projection (a : carspeed__ref)
    requires {  } ensures  {  } returns carspeed = a.carspeed__content
  
  meta model_projection function carspeed__ref_carspeed__content__projection
  
  meta inline:no function carspeed__ref_carspeed__content__projection
  
  function   carspeed__havoc (x : carspeed__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "carspeed" defined at selfdrivingcar.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__carspeed__rep
  
  use        Selfdrivingcar__carspeed
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Selfdrivingcar__carspeed.carspeed) requires { True }
    ensures  { True } returns int = (Selfdrivingcar__carspeed.carspeed'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Selfdrivingcar__carspeed.carspeed,
    predicate in_range = Selfdrivingcar__carspeed.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "object" defined at selfdrivingcar.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__object
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type object  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = object,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type object__ref  = { mutable object__content : object }
  
  function   object__ref_object__content__projection (a : object__ref)
    requires {  } ensures  {  } returns object = a.object__content
  
  meta model_projection function object__ref_object__content__projection
  
  meta inline:no function object__ref_object__content__projection
  
  function   object__havoc (x : object__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "object" defined at selfdrivingcar.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__object__rep
  
  use        Selfdrivingcar__object
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Selfdrivingcar__object.object,
    predicate in_range = Selfdrivingcar__object.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "diagnosticmode" defined at selfdrivingcar.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__diagnosticmode
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type diagnosticmode  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = diagnosticmode,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type diagnosticmode__ref  = { mutable diagnosticmode__content : diagnosticmode }
  
  function   diagnosticmode__ref_diagnosticmode__content__projection
    (a : diagnosticmode__ref) requires {  } ensures  {  } returns
    diagnosticmode = a.diagnosticmode__content
  
  meta model_projection function diagnosticmode__ref_diagnosticmode__content__projection
  
  meta inline:no function diagnosticmode__ref_diagnosticmode__content__projection
  
  function   diagnosticmode__havoc (x : diagnosticmode__ref) requires {  }
    ensures  {  } returns unit

end

(* Module defining to_rep/of_rep for type "diagnosticmode" defined at selfdrivingcar.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__diagnosticmode__rep
  
  use        Selfdrivingcar__diagnosticmode
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Selfdrivingcar__diagnosticmode.diagnosticmode,
    predicate in_range = Selfdrivingcar__diagnosticmode.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "chargestate" defined at selfdrivingcar.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__chargestate
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type chargestate  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 2
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = chargestate,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type chargestate__ref  = { mutable chargestate__content : chargestate }
  
  function   chargestate__ref_chargestate__content__projection
    (a : chargestate__ref) requires {  } ensures  {  } returns
    chargestate = a.chargestate__content
  
  meta model_projection function chargestate__ref_chargestate__content__projection
  
  meta inline:no function chargestate__ref_chargestate__content__projection
  
  function   chargestate__havoc (x : chargestate__ref) requires {  } ensures 
    {  } returns unit

end

(* Module defining to_rep/of_rep for type "chargestate" defined at selfdrivingcar.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__chargestate__rep
  
  use        Selfdrivingcar__chargestate
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Selfdrivingcar__chargestate.chargestate,
    predicate in_range = Selfdrivingcar__chargestate.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "trafficlight" defined at selfdrivingcar.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__trafficlight
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type trafficlight  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 2
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = trafficlight,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type trafficlight__ref  = { mutable trafficlight__content : trafficlight }
  
  function   trafficlight__ref_trafficlight__content__projection
    (a : trafficlight__ref) requires {  } ensures  {  } returns
    trafficlight = a.trafficlight__content
  
  meta model_projection function trafficlight__ref_trafficlight__content__projection
  
  meta inline:no function trafficlight__ref_trafficlight__content__projection
  
  function   trafficlight__havoc (x : trafficlight__ref) requires {  }
    ensures  {  } returns unit

end

(* Module defining to_rep/of_rep for type "trafficlight" defined at selfdrivingcar.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__trafficlight__rep
  
  use        Selfdrivingcar__trafficlight
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Selfdrivingcar__trafficlight.trafficlight,
    predicate in_range = Selfdrivingcar__trafficlight.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the record theory associated to type "car" defined at selfdrivingcar.ads:13, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Selfdrivingcar__car__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Selfdrivingcar__onoff
  use        Selfdrivingcar__onoff__rep
  use        Selfdrivingcar__gearbox
  use        Selfdrivingcar__gearbox__rep
  use        Selfdrivingcar__chargelevel
  use        Selfdrivingcar__chargelevel__rep
  use        Selfdrivingcar__carspeed
  use        Selfdrivingcar__carspeed__rep
  use        Selfdrivingcar__object
  use        Selfdrivingcar__object__rep
  use        Selfdrivingcar__diagnosticmode
  use        Selfdrivingcar__diagnosticmode__rep
  use        Selfdrivingcar__chargestate
  use        Selfdrivingcar__chargestate__rep
  use        Selfdrivingcar__trafficlight
  use        Selfdrivingcar__trafficlight__rep
  
  type __split_fields  = { [name:gear]
                           [model_trace:.1068]rec__selfdrivingcar__car__gear : Selfdrivingcar__gearbox.gearbox;
                           [model_trace:.1073]
                           [name:switch]rec__selfdrivingcar__car__switch : Selfdrivingcar__onoff.onoff;
                           [model_trace:.1077]
                           [name:battery]rec__selfdrivingcar__car__battery : Selfdrivingcar__chargelevel.chargelevel;
                           [model_trace:.1081]
                           [name:speed]rec__selfdrivingcar__car__speed : Selfdrivingcar__carspeed.carspeed;
                           [name:sensor]
                           [model_trace:.1085]rec__selfdrivingcar__car__sensor : Selfdrivingcar__object.object;
                           [name:diagnostic]
                           [model_trace:.1089]rec__selfdrivingcar__car__diagnostic : Selfdrivingcar__diagnosticmode.diagnosticmode;
                           [name:charge]
                           [model_trace:.1093]rec__selfdrivingcar__car__charge : Selfdrivingcar__chargestate.chargestate;
                           [name:signal]
                           [model_trace:.1097]rec__selfdrivingcar__car__signal : Selfdrivingcar__trafficlight.trafficlight }
  
  function [name:gear] [model_trace:.1068] 
    __split_fields_rec__selfdrivingcar__car__gear__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Selfdrivingcar__gearbox.gearbox = a.rec__selfdrivingcar__car__gear
  
  meta model_projection function __split_fields_rec__selfdrivingcar__car__gear__projection
  
  meta inline:no function __split_fields_rec__selfdrivingcar__car__gear__projection
  
  function [model_trace:.1073] [name:switch] 
    __split_fields_rec__selfdrivingcar__car__switch__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Selfdrivingcar__onoff.onoff = a.rec__selfdrivingcar__car__switch
  
  meta model_projection function __split_fields_rec__selfdrivingcar__car__switch__projection
  
  meta inline:no function __split_fields_rec__selfdrivingcar__car__switch__projection
  
  function [model_trace:.1077] [name:battery] 
    __split_fields_rec__selfdrivingcar__car__battery__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Selfdrivingcar__chargelevel.chargelevel = a.rec__selfdrivingcar__car__battery
  
  meta model_projection function __split_fields_rec__selfdrivingcar__car__battery__projection
  
  meta inline:no function __split_fields_rec__selfdrivingcar__car__battery__projection
  
  function [model_trace:.1081] [name:speed] 
    __split_fields_rec__selfdrivingcar__car__speed__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Selfdrivingcar__carspeed.carspeed = a.rec__selfdrivingcar__car__speed
  
  meta model_projection function __split_fields_rec__selfdrivingcar__car__speed__projection
  
  meta inline:no function __split_fields_rec__selfdrivingcar__car__speed__projection
  
  function [name:sensor] [model_trace:.1085] 
    __split_fields_rec__selfdrivingcar__car__sensor__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Selfdrivingcar__object.object = a.rec__selfdrivingcar__car__sensor
  
  meta model_projection function __split_fields_rec__selfdrivingcar__car__sensor__projection
  
  meta inline:no function __split_fields_rec__selfdrivingcar__car__sensor__projection
  
  function [name:diagnostic] [model_trace:.1089] 
    __split_fields_rec__selfdrivingcar__car__diagnostic__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Selfdrivingcar__diagnosticmode.diagnosticmode = a.rec__selfdrivingcar__car__diagnostic
  
  meta model_projection function __split_fields_rec__selfdrivingcar__car__diagnostic__projection
  
  meta inline:no function __split_fields_rec__selfdrivingcar__car__diagnostic__projection
  
  function [name:charge] [model_trace:.1093] 
    __split_fields_rec__selfdrivingcar__car__charge__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Selfdrivingcar__chargestate.chargestate = a.rec__selfdrivingcar__car__charge
  
  meta model_projection function __split_fields_rec__selfdrivingcar__car__charge__projection
  
  meta inline:no function __split_fields_rec__selfdrivingcar__car__charge__projection
  
  function [name:signal] [model_trace:.1097] 
    __split_fields_rec__selfdrivingcar__car__signal__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Selfdrivingcar__trafficlight.trafficlight = a.rec__selfdrivingcar__car__signal
  
  meta model_projection function __split_fields_rec__selfdrivingcar__car__signal__projection
  
  meta inline:no function __split_fields_rec__selfdrivingcar__car__signal__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__projection
  
  meta inline:no function __rep___split_fields__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   selfdrivingcar__car__gear__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__selfdrivingcar__car__gear_ (a : __rep) requires
    { (selfdrivingcar__car__gear__pred a) } ensures 
    { (result = a.__split_fields.rec__selfdrivingcar__car__gear) } returns
    Selfdrivingcar__gearbox.gearbox
  
  function   selfdrivingcar__car__switch__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__selfdrivingcar__car__switch_ (a : __rep) requires
    { (selfdrivingcar__car__switch__pred a) } ensures 
    { (result = a.__split_fields.rec__selfdrivingcar__car__switch) } returns
    Selfdrivingcar__onoff.onoff
  
  function   selfdrivingcar__car__battery__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__selfdrivingcar__car__battery_ (a : __rep) requires
    { (selfdrivingcar__car__battery__pred a) } ensures 
    { (result = a.__split_fields.rec__selfdrivingcar__car__battery) } returns
    Selfdrivingcar__chargelevel.chargelevel
  
  function   selfdrivingcar__car__speed__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__selfdrivingcar__car__speed_ (a : __rep) requires
    { (selfdrivingcar__car__speed__pred a) } ensures 
    { (result = a.__split_fields.rec__selfdrivingcar__car__speed) } returns
    Selfdrivingcar__carspeed.carspeed
  
  function   selfdrivingcar__car__sensor__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__selfdrivingcar__car__sensor_ (a : __rep) requires
    { (selfdrivingcar__car__sensor__pred a) } ensures 
    { (result = a.__split_fields.rec__selfdrivingcar__car__sensor) } returns
    Selfdrivingcar__object.object
  
  function   selfdrivingcar__car__diagnostic__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__selfdrivingcar__car__diagnostic_ (a : __rep) requires
    { (selfdrivingcar__car__diagnostic__pred a) } ensures 
    { (result = a.__split_fields.rec__selfdrivingcar__car__diagnostic) }
    returns Selfdrivingcar__diagnosticmode.diagnosticmode
  
  function   selfdrivingcar__car__charge__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__selfdrivingcar__car__charge_ (a : __rep) requires
    { (selfdrivingcar__car__charge__pred a) } ensures 
    { (result = a.__split_fields.rec__selfdrivingcar__car__charge) } returns
    Selfdrivingcar__chargestate.chargestate
  
  function   selfdrivingcar__car__signal__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__selfdrivingcar__car__signal_ (a : __rep) requires
    { (selfdrivingcar__car__signal__pred a) } ensures 
    { (result = a.__split_fields.rec__selfdrivingcar__car__signal) } returns
    Selfdrivingcar__trafficlight.trafficlight
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((Selfdrivingcar__gearbox__rep.to_rep
                a.__split_fields.rec__selfdrivingcar__car__gear)
               = (Selfdrivingcar__gearbox__rep.to_rep
                    b.__split_fields.rec__selfdrivingcar__car__gear)) /\
              ((Selfdrivingcar__onoff__rep.to_rep
                  a.__split_fields.rec__selfdrivingcar__car__switch)
                 = (Selfdrivingcar__onoff__rep.to_rep
                      b.__split_fields.rec__selfdrivingcar__car__switch)) /\
              ((Selfdrivingcar__chargelevel__rep.to_rep
                  a.__split_fields.rec__selfdrivingcar__car__battery)
                 = (Selfdrivingcar__chargelevel__rep.to_rep
                      b.__split_fields.rec__selfdrivingcar__car__battery)) /\
              ((Selfdrivingcar__carspeed__rep.to_rep
                  a.__split_fields.rec__selfdrivingcar__car__speed)
                 = (Selfdrivingcar__carspeed__rep.to_rep
                      b.__split_fields.rec__selfdrivingcar__car__speed)) /\
              ((Selfdrivingcar__object__rep.to_rep
                  a.__split_fields.rec__selfdrivingcar__car__sensor)
                 = (Selfdrivingcar__object__rep.to_rep
                      b.__split_fields.rec__selfdrivingcar__car__sensor)) /\
              ((Selfdrivingcar__diagnosticmode__rep.to_rep
                  a.__split_fields.rec__selfdrivingcar__car__diagnostic)
                 = (Selfdrivingcar__diagnosticmode__rep.to_rep
                      b.__split_fields.rec__selfdrivingcar__car__diagnostic))
              /\
              ((Selfdrivingcar__chargestate__rep.to_rep
                  a.__split_fields.rec__selfdrivingcar__car__charge)
                 = (Selfdrivingcar__chargestate__rep.to_rep
                      b.__split_fields.rec__selfdrivingcar__car__charge)) /\
              ((Selfdrivingcar__trafficlight__rep.to_rep
                  a.__split_fields.rec__selfdrivingcar__car__signal)
                 = (Selfdrivingcar__trafficlight__rep.to_rep
                      b.__split_fields.rec__selfdrivingcar__car__signal)))
           then True  else False)

end

(* Module for axiomatizing type "car" defined at selfdrivingcar.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Selfdrivingcar__car
  
  use export Selfdrivingcar__car__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type car  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   selfdrivingcar__car__gear__first__bit () requires {  } ensures 
    {  } returns int
  
  function   selfdrivingcar__car__gear__last__bit () requires {  } ensures 
    {  } returns int
  
  function   selfdrivingcar__car__gear__position () requires {  } ensures 
    {  } returns int
  
  axiom selfdrivingcar__car__gear__first__bit_axiom : ((selfdrivingcar__car__gear__first__bit
                                                          ) >= 0)
  
  axiom selfdrivingcar__car__gear__last__bit_axiom : ((selfdrivingcar__car__gear__last__bit
                                                         )
                                                        > (selfdrivingcar__car__gear__first__bit
                                                             ))
  
  axiom selfdrivingcar__car__gear__position_axiom : ((selfdrivingcar__car__gear__position
                                                        ) >= 0)
  
  function   selfdrivingcar__car__switch__first__bit () requires {  }
    ensures  {  } returns int
  
  function   selfdrivingcar__car__switch__last__bit () requires {  } ensures 
    {  } returns int
  
  function   selfdrivingcar__car__switch__position () requires {  } ensures 
    {  } returns int
  
  axiom selfdrivingcar__car__switch__first__bit_axiom : ((selfdrivingcar__car__switch__first__bit
                                                            ) >= 0)
  
  axiom selfdrivingcar__car__switch__last__bit_axiom : ((selfdrivingcar__car__switch__last__bit
                                                           )
                                                          > (selfdrivingcar__car__switch__first__bit
                                                               ))
  
  axiom selfdrivingcar__car__switch__position_axiom : ((selfdrivingcar__car__switch__position
                                                          ) >= 0)
  
  function   selfdrivingcar__car__battery__first__bit () requires {  }
    ensures  {  } returns int
  
  function   selfdrivingcar__car__battery__last__bit () requires {  }
    ensures  {  } returns int
  
  function   selfdrivingcar__car__battery__position () requires {  } ensures 
    {  } returns int
  
  axiom selfdrivingcar__car__battery__first__bit_axiom : ((selfdrivingcar__car__battery__first__bit
                                                             ) >= 0)
  
  axiom selfdrivingcar__car__battery__last__bit_axiom : ((selfdrivingcar__car__battery__last__bit
                                                            )
                                                           > (selfdrivingcar__car__battery__first__bit
                                                                ))
  
  axiom selfdrivingcar__car__battery__position_axiom : ((selfdrivingcar__car__battery__position
                                                           ) >= 0)
  
  function   selfdrivingcar__car__speed__first__bit () requires {  } ensures 
    {  } returns int
  
  function   selfdrivingcar__car__speed__last__bit () requires {  } ensures 
    {  } returns int
  
  function   selfdrivingcar__car__speed__position () requires {  } ensures 
    {  } returns int
  
  axiom selfdrivingcar__car__speed__first__bit_axiom : ((selfdrivingcar__car__speed__first__bit
                                                           ) >= 0)
  
  axiom selfdrivingcar__car__speed__last__bit_axiom : ((selfdrivingcar__car__speed__last__bit
                                                          )
                                                         > (selfdrivingcar__car__speed__first__bit
                                                              ))
  
  axiom selfdrivingcar__car__speed__position_axiom : ((selfdrivingcar__car__speed__position
                                                         ) >= 0)
  
  function   selfdrivingcar__car__sensor__first__bit () requires {  }
    ensures  {  } returns int
  
  function   selfdrivingcar__car__sensor__last__bit () requires {  } ensures 
    {  } returns int
  
  function   selfdrivingcar__car__sensor__position () requires {  } ensures 
    {  } returns int
  
  axiom selfdrivingcar__car__sensor__first__bit_axiom : ((selfdrivingcar__car__sensor__first__bit
                                                            ) >= 0)
  
  axiom selfdrivingcar__car__sensor__last__bit_axiom : ((selfdrivingcar__car__sensor__last__bit
                                                           )
                                                          > (selfdrivingcar__car__sensor__first__bit
                                                               ))
  
  axiom selfdrivingcar__car__sensor__position_axiom : ((selfdrivingcar__car__sensor__position
                                                          ) >= 0)
  
  function   selfdrivingcar__car__diagnostic__first__bit () requires {  }
    ensures  {  } returns int
  
  function   selfdrivingcar__car__diagnostic__last__bit () requires {  }
    ensures  {  } returns int
  
  function   selfdrivingcar__car__diagnostic__position () requires {  }
    ensures  {  } returns int
  
  axiom selfdrivingcar__car__diagnostic__first__bit_axiom : ((selfdrivingcar__car__diagnostic__first__bit
                                                                ) >= 0)
  
  axiom selfdrivingcar__car__diagnostic__last__bit_axiom : ((selfdrivingcar__car__diagnostic__last__bit
                                                               )
                                                              > (selfdrivingcar__car__diagnostic__first__bit
                                                                   ))
  
  axiom selfdrivingcar__car__diagnostic__position_axiom : ((selfdrivingcar__car__diagnostic__position
                                                              ) >= 0)
  
  function   selfdrivingcar__car__charge__first__bit () requires {  }
    ensures  {  } returns int
  
  function   selfdrivingcar__car__charge__last__bit () requires {  } ensures 
    {  } returns int
  
  function   selfdrivingcar__car__charge__position () requires {  } ensures 
    {  } returns int
  
  axiom selfdrivingcar__car__charge__first__bit_axiom : ((selfdrivingcar__car__charge__first__bit
                                                            ) >= 0)
  
  axiom selfdrivingcar__car__charge__last__bit_axiom : ((selfdrivingcar__car__charge__last__bit
                                                           )
                                                          > (selfdrivingcar__car__charge__first__bit
                                                               ))
  
  axiom selfdrivingcar__car__charge__position_axiom : ((selfdrivingcar__car__charge__position
                                                          ) >= 0)
  
  function   selfdrivingcar__car__signal__first__bit () requires {  }
    ensures  {  } returns int
  
  function   selfdrivingcar__car__signal__last__bit () requires {  } ensures 
    {  } returns int
  
  function   selfdrivingcar__car__signal__position () requires {  } ensures 
    {  } returns int
  
  axiom selfdrivingcar__car__signal__first__bit_axiom : ((selfdrivingcar__car__signal__first__bit
                                                            ) >= 0)
  
  axiom selfdrivingcar__car__signal__last__bit_axiom : ((selfdrivingcar__car__signal__last__bit
                                                           )
                                                          > (selfdrivingcar__car__signal__first__bit
                                                               ))
  
  axiom selfdrivingcar__car__signal__position_axiom : ((selfdrivingcar__car__signal__position
                                                          ) >= 0)
  
  function   user_eq (a : car b : car) requires { True } ensures  { True }
    returns bool
  
  function   dummy () requires {  } ensures  {  } returns car
  
  type car__ref  = { mutable car__content : car }
  
  function   car__ref_car__content__projection (a : car__ref) requires {  }
    ensures  {  } returns car = a.car__content
  
  meta model_projection function car__ref_car__content__projection
  
  meta inline:no function car__ref_car__content__projection
  
  function   car__havoc (x : car__ref) requires {  } ensures  {  } returns
    unit

end

(* Module for defining a ref holding the value of variable "thecar" defined at selfdrivingcar.ads:25, created in Gnat2Why.Decls.Translate_Variable *)
module Selfdrivingcar__thecar
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Selfdrivingcar__car
  
  val thecar__split_fields [model_projected] [model_trace:1103]
  [name:TheCar] [sloc:selfdrivingcar.ads:25]: Selfdrivingcar__car.__split_fields

end

(* Module giving axioms for type "car" defined at selfdrivingcar.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selfdrivingcar__car___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Selfdrivingcar__car
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_223) : Selfdrivingcar__car.car
    ([mlw:proxy_symbol] [introduced] temp___is_init_219) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_220) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_221) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_222) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_224) : Selfdrivingcar__car.car
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_225) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "onoff" defined at selfdrivingcar.ads:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selfdrivingcar__onoff___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Selfdrivingcar__onoff
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_167) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_163) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_164) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_165) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_166) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_163) = True) \/
          (Selfdrivingcar__onoff.first <= Selfdrivingcar__onoff.last))
       then
       (Selfdrivingcar__onoff.dynamic_property Selfdrivingcar__onoff.first
          Selfdrivingcar__onoff.last ([mlw:proxy_symbol]
          [introduced] temp___expr_167))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_168) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_169) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "gearbox" defined at selfdrivingcar.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selfdrivingcar__gearbox___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Selfdrivingcar__gearbox
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_174) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_170) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_171) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_172) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_173) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_170) = True) \/
          (Selfdrivingcar__gearbox.first <= Selfdrivingcar__gearbox.last))
       then
       (Selfdrivingcar__gearbox.dynamic_property
          Selfdrivingcar__gearbox.first Selfdrivingcar__gearbox.last
          ([mlw:proxy_symbol] [introduced] temp___expr_174))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_175) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_176) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "chargelevel" defined at selfdrivingcar.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selfdrivingcar__chargelevel___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Selfdrivingcar__chargelevel
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_181) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_177) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_178) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_179) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_180) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_177) = True) \/
          (Selfdrivingcar__chargelevel.first
             <= Selfdrivingcar__chargelevel.last))
       then
       (Selfdrivingcar__chargelevel.dynamic_property
          Selfdrivingcar__chargelevel.first Selfdrivingcar__chargelevel.last
          ([mlw:proxy_symbol] [introduced] temp___expr_181))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_182) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_183) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "carspeed" defined at selfdrivingcar.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selfdrivingcar__carspeed___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Selfdrivingcar__carspeed
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_188) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_184) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_185) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_186) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_187) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_184) = True) \/
          (Selfdrivingcar__carspeed.first <= Selfdrivingcar__carspeed.last))
       then
       (Selfdrivingcar__carspeed.dynamic_property
          Selfdrivingcar__carspeed.first Selfdrivingcar__carspeed.last
          ([mlw:proxy_symbol] [introduced] temp___expr_188))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_189) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_190) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "object" defined at selfdrivingcar.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selfdrivingcar__object___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Selfdrivingcar__object
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_195) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_191) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_192) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_193) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_194) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_191) = True) \/
          (Selfdrivingcar__object.first <= Selfdrivingcar__object.last))
       then
       (Selfdrivingcar__object.dynamic_property Selfdrivingcar__object.first
          Selfdrivingcar__object.last ([mlw:proxy_symbol]
          [introduced] temp___expr_195))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_196) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_197) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "diagnosticmode" defined at selfdrivingcar.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selfdrivingcar__diagnosticmode___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Selfdrivingcar__diagnosticmode
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_202) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_198) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_199) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_200) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_201) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_198) = True) \/
          (Selfdrivingcar__diagnosticmode.first
             <= Selfdrivingcar__diagnosticmode.last))
       then
       (Selfdrivingcar__diagnosticmode.dynamic_property
          Selfdrivingcar__diagnosticmode.first
          Selfdrivingcar__diagnosticmode.last ([mlw:proxy_symbol]
          [introduced] temp___expr_202))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_203) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_204) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "chargestate" defined at selfdrivingcar.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selfdrivingcar__chargestate___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Selfdrivingcar__chargestate
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_209) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_205) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_206) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_207) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_208) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_205) = True) \/
          (Selfdrivingcar__chargestate.first
             <= Selfdrivingcar__chargestate.last))
       then
       (Selfdrivingcar__chargestate.dynamic_property
          Selfdrivingcar__chargestate.first Selfdrivingcar__chargestate.last
          ([mlw:proxy_symbol] [introduced] temp___expr_209))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_210) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_211) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "trafficlight" defined at selfdrivingcar.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selfdrivingcar__trafficlight___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Selfdrivingcar__trafficlight
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_216) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_212) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_213) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_214) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_215) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_212) = True) \/
          (Selfdrivingcar__trafficlight.first
             <= Selfdrivingcar__trafficlight.last))
       then
       (Selfdrivingcar__trafficlight.dynamic_property
          Selfdrivingcar__trafficlight.first
          Selfdrivingcar__trafficlight.last ([mlw:proxy_symbol]
          [introduced] temp___expr_216))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_217) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_218) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "thecar" defined at selfdrivingcar.ads:25, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Selfdrivingcar__thecar___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "objectdetection" defined at selfdrivingcar.ads:62, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Selfdrivingcar__objectdetection__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Main
  use        Selfdrivingcar__thecar
  use        Selfdrivingcar__car
  use        Selfdrivingcar__car___axiom
  use        Selfdrivingcar__carspeed
  use        Selfdrivingcar__carspeed__rep
  use        Selfdrivingcar__object
  use        Selfdrivingcar__object__rep
  use        Selfdrivingcar__onoff___axiom
  use        Selfdrivingcar__gearbox___axiom
  use        Selfdrivingcar__chargelevel___axiom
  use        Selfdrivingcar__carspeed___axiom
  use        Selfdrivingcar__object___axiom
  use        Selfdrivingcar__diagnosticmode___axiom
  use        Selfdrivingcar__chargestate___axiom
  use        Selfdrivingcar__trafficlight___axiom
  use        Selfdrivingcar__car___axiom
  use        Selfdrivingcar__thecar___axiom
  
  function [GP_Subp:selfdrivingcar.ads:62] [sloc:selfdrivingcar.ads:62] def
    (__void_param : unit) requires { True } ensures 
    { ([sloc:selfdrivingcar.ads:65] ([GP_Reason:VC_POSTCONDITION]
                                    [GP_Shape:pragargs__cmp]
                                    [comment:     Post => TheCar.speed = 0;              ^ selfdrivingcar.ads:65:14:VC_POSTCONDITION]
                                    [model_vc_post]
                                    [GP_Sloc:selfdrivingcar.ads:65:14]
                                    [GP_Id:7] ([GP_Pretty_Ada:1696]
                                              [GP_Sloc:selfdrivingcar.ads:65:14] (
                                              (Selfdrivingcar__carspeed__rep.to_rep
                                                 ( --pp_record_aggregate NOT IMPLEMENTED).Selfdrivingcar__car.__split_fields.Selfdrivingcar__car.rec__selfdrivingcar__car__speed)
                                                = 0)))) } returns
     = (* Assume dynamic invariants of inputs of the subprogram selfdrivingcar.ads:62 *);
        assume
        { (Selfdrivingcar__car___axiom.dynamic_invariant
             --pp_record_aggregate NOT IMPLEMENTED True False True True) };
        (* Assume moved pointers in outputs of the subprogram selfdrivingcar.ads:62 *);
        (* Check for RTE in the Pre of the subprogram selfdrivingcar.ads:62 *);
        abstract ensures
        { True } begin  (let _ =
                       ((Selfdrivingcar__object__rep.to_rep
                           ( --pp_record_aggregate NOT IMPLEMENTED).Selfdrivingcar__car.__split_fields.Selfdrivingcar__car.rec__selfdrivingcar__car__sensor)
                          = 0)
                       in ())  end;
        (* Assume Pre of the subprogram selfdrivingcar.ads:62 *);
        assume
        { ([GP_Pretty_Ada:1684] ((Selfdrivingcar__object__rep.to_rep
                                    ( --pp_record_aggregate NOT IMPLEMENTED).Selfdrivingcar__car.__split_fields.Selfdrivingcar__car.rec__selfdrivingcar__car__sensor)
                                   = 0)) };
        (try
        ();
          ([GP_Sloc:selfdrivingcar.adb:47:11] ([sloc:selfdrivingcar.adb:47] ()));
          ([GP_Sloc:selfdrivingcar.adb:47:7] ([sloc:selfdrivingcar.adb:47] 
                                             (if
                                             ([sloc:selfdrivingcar.adb:47] ([branch_id=944]
                                             _gnatprove_standard.Main.spark__branch
                                             :=
                                             ((Selfdrivingcar__object__rep.to_rep
                                                 ( --pp_record_aggregate NOT IMPLEMENTED).Selfdrivingcar__car.__split_fields.Selfdrivingcar__car.rec__selfdrivingcar__car__sensor)
                                                = 0)));
                                             ([branch_id=944] _gnatprove_standard.Main.spark__branch).bool__content
                                             then
                                             ();
                                             ([GP_Sloc:selfdrivingcar.adb:48:12] 
                                             ([sloc:selfdrivingcar.adb:48] ()));
                                             ([GP_Sloc:selfdrivingcar.adb:48:25] 
                                             ([sloc:selfdrivingcar.adb:48] (let ([mlw:proxy_symbol]
                                             [introduced] temp___266) =
                                             (let ([mlw:proxy_symbol]
                                               [introduced] temp___265) =
                                               ( --pp_record_aggregate NOT IMPLEMENTED)
                                               in abstract ensures
                                               { True } begin  (let _ =
                                                              ([mlw:proxy_symbol]
                                                                [introduced] temp___265).Selfdrivingcar__car.__split_fields.Selfdrivingcar__car.rec__selfdrivingcar__car__speed
                                                              in ())  end;
                                               --pp_record_update NOT IMPLEMENTED)
                                             in (
                                             Selfdrivingcar__thecar.thecar__split_fields
                                             :=
                                             ([mlw:proxy_symbol]
                                               [introduced] temp___266).Selfdrivingcar__car.__split_fields))))
                                              else ())));
          raise Return__exc with | Return__exc  -> ());
        abstract ensures
        { True } begin  (let _ =
                       ((Selfdrivingcar__carspeed__rep.to_rep
                           ( --pp_record_aggregate NOT IMPLEMENTED).Selfdrivingcar__car.__split_fields.Selfdrivingcar__car.rec__selfdrivingcar__car__speed)
                          = 0)
                       in ())  end

end
